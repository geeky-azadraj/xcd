/* tslint:disable */
/* eslint-disable */
/**
 * XCD APIs
 * API documentation for the backend services of XCD
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RefreshTokenApiResponseDto,
} from '../models/index';
import {
    RefreshTokenApiResponseDtoFromJSON,
    RefreshTokenApiResponseDtoToJSON,
} from '../models/index';

export interface AuthControllerAuthenticateWithGoogleV1Request {
    nextUrl?: string;
}

export interface AuthControllerGoogleAuthCallbackV1Request {
    state: string;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Initiate Google OAuth login
     */
    async authControllerAuthenticateWithGoogleV1Raw(requestParameters: AuthControllerAuthenticateWithGoogleV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['nextUrl'] != null) {
            queryParameters['next_url'] = requestParameters['nextUrl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/auth/google`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Initiate Google OAuth login
     */
    async authControllerAuthenticateWithGoogleV1(requestParameters: AuthControllerAuthenticateWithGoogleV1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerAuthenticateWithGoogleV1Raw(requestParameters, initOverrides);
    }

    /**
     * Authenticate user with Google
     */
    async authControllerGoogleAuthCallbackV1Raw(requestParameters: AuthControllerGoogleAuthCallbackV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling authControllerGoogleAuthCallbackV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/auth/google/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authenticate user with Google
     */
    async authControllerGoogleAuthCallbackV1(requestParameters: AuthControllerGoogleAuthCallbackV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerGoogleAuthCallbackV1Raw(requestParameters, initOverrides);
    }

    /**
     * Include refresh token in the authorisation header
     * Refresh JWT token
     */
    async authControllerRefreshTokenV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshTokenApiResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/auth/refresh`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshTokenApiResponseDtoFromJSON(jsonValue));
    }

    /**
     * Include refresh token in the authorisation header
     * Refresh JWT token
     */
    async authControllerRefreshTokenV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshTokenApiResponseDto> {
        const response = await this.authControllerRefreshTokenV1Raw(initOverrides);
        return await response.value();
    }

}
