/* tslint:disable */
/* eslint-disable */
/**
 * XCD APIs
 * API documentation for the backend services of XCD
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateCustomerDto,
  CustomerListResponseDto,
  CustomerResponseDto,
  ToggleStatusDto,
  UpdateCustomerDto,
} from '../models/index';
import {
    CreateCustomerDtoFromJSON,
    CreateCustomerDtoToJSON,
    CustomerListResponseDtoFromJSON,
    CustomerListResponseDtoToJSON,
    CustomerResponseDtoFromJSON,
    CustomerResponseDtoToJSON,
    ToggleStatusDtoFromJSON,
    ToggleStatusDtoToJSON,
    UpdateCustomerDtoFromJSON,
    UpdateCustomerDtoToJSON,
} from '../models/index';

export interface CustomerControllerCreateV1Request {
    createCustomerDto: CreateCustomerDto;
}

export interface CustomerControllerFindAllV1Request {
    page?: number;
    limit?: number;
}

export interface CustomerControllerFindByCompanyV1Request {
    companyId: string;
}

export interface CustomerControllerFindByStatusV1Request {
    status: string;
}

export interface CustomerControllerFindOneV1Request {
    customerId: string;
}

export interface CustomerControllerRemoveV1Request {
    customerId: string;
}

export interface CustomerControllerSearchCustomersV1Request {
    q: string;
}

export interface CustomerControllerToggleStatusV1Request {
    customerId: string;
    toggleStatusDto: ToggleStatusDto;
}

export interface CustomerControllerUpdateV1Request {
    customerId: string;
    updateCustomerDto: UpdateCustomerDto;
}

/**
 * 
 */
export class CustomersApi extends runtime.BaseAPI {

    /**
     * Create a new customer
     */
    async customerControllerCreateV1Raw(requestParameters: CustomerControllerCreateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerResponseDto>> {
        if (requestParameters['createCustomerDto'] == null) {
            throw new runtime.RequiredError(
                'createCustomerDto',
                'Required parameter "createCustomerDto" was null or undefined when calling customerControllerCreateV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCustomerDtoToJSON(requestParameters['createCustomerDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new customer
     */
    async customerControllerCreateV1(requestParameters: CustomerControllerCreateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerResponseDto> {
        const response = await this.customerControllerCreateV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all customers with pagination
     */
    async customerControllerFindAllV1Raw(requestParameters: CustomerControllerFindAllV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerListResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get all customers with pagination
     */
    async customerControllerFindAllV1(requestParameters: CustomerControllerFindAllV1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerListResponseDto> {
        const response = await this.customerControllerFindAllV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get customers by company ID
     */
    async customerControllerFindByCompanyV1Raw(requestParameters: CustomerControllerFindByCompanyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomerResponseDto>>> {
        if (requestParameters['companyId'] == null) {
            throw new runtime.RequiredError(
                'companyId',
                'Required parameter "companyId" was null or undefined when calling customerControllerFindByCompanyV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/customers/company/{companyId}`.replace(`{${"companyId"}}`, encodeURIComponent(String(requestParameters['companyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerResponseDtoFromJSON));
    }

    /**
     * Get customers by company ID
     */
    async customerControllerFindByCompanyV1(requestParameters: CustomerControllerFindByCompanyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomerResponseDto>> {
        const response = await this.customerControllerFindByCompanyV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get customers by status
     */
    async customerControllerFindByStatusV1Raw(requestParameters: CustomerControllerFindByStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomerResponseDto>>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling customerControllerFindByStatusV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/customers/status/{status}`.replace(`{${"status"}}`, encodeURIComponent(String(requestParameters['status']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerResponseDtoFromJSON));
    }

    /**
     * Get customers by status
     */
    async customerControllerFindByStatusV1(requestParameters: CustomerControllerFindByStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomerResponseDto>> {
        const response = await this.customerControllerFindByStatusV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get customer by ID
     */
    async customerControllerFindOneV1Raw(requestParameters: CustomerControllerFindOneV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerResponseDto>> {
        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling customerControllerFindOneV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/customers/{customerId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters['customerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get customer by ID
     */
    async customerControllerFindOneV1(requestParameters: CustomerControllerFindOneV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerResponseDto> {
        const response = await this.customerControllerFindOneV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete customer (soft delete)
     */
    async customerControllerRemoveV1Raw(requestParameters: CustomerControllerRemoveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling customerControllerRemoveV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/customers/{customerId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters['customerId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete customer (soft delete)
     */
    async customerControllerRemoveV1(requestParameters: CustomerControllerRemoveV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.customerControllerRemoveV1Raw(requestParameters, initOverrides);
    }

    /**
     * Search customers by name or email
     */
    async customerControllerSearchCustomersV1Raw(requestParameters: CustomerControllerSearchCustomersV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomerResponseDto>>> {
        if (requestParameters['q'] == null) {
            throw new runtime.RequiredError(
                'q',
                'Required parameter "q" was null or undefined when calling customerControllerSearchCustomersV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/customers/searchby`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerResponseDtoFromJSON));
    }

    /**
     * Search customers by name or email
     */
    async customerControllerSearchCustomersV1(requestParameters: CustomerControllerSearchCustomersV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomerResponseDto>> {
        const response = await this.customerControllerSearchCustomersV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable or disable customer
     */
    async customerControllerToggleStatusV1Raw(requestParameters: CustomerControllerToggleStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerResponseDto>> {
        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling customerControllerToggleStatusV1().'
            );
        }

        if (requestParameters['toggleStatusDto'] == null) {
            throw new runtime.RequiredError(
                'toggleStatusDto',
                'Required parameter "toggleStatusDto" was null or undefined when calling customerControllerToggleStatusV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/customers/{customerId}/toggle-status`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters['customerId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ToggleStatusDtoToJSON(requestParameters['toggleStatusDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerResponseDtoFromJSON(jsonValue));
    }

    /**
     * Enable or disable customer
     */
    async customerControllerToggleStatusV1(requestParameters: CustomerControllerToggleStatusV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerResponseDto> {
        const response = await this.customerControllerToggleStatusV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update customer
     */
    async customerControllerUpdateV1Raw(requestParameters: CustomerControllerUpdateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerResponseDto>> {
        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling customerControllerUpdateV1().'
            );
        }

        if (requestParameters['updateCustomerDto'] == null) {
            throw new runtime.RequiredError(
                'updateCustomerDto',
                'Required parameter "updateCustomerDto" was null or undefined when calling customerControllerUpdateV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/customers/{customerId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters['customerId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCustomerDtoToJSON(requestParameters['updateCustomerDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerResponseDtoFromJSON(jsonValue));
    }

    /**
     * Update customer
     */
    async customerControllerUpdateV1(requestParameters: CustomerControllerUpdateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerResponseDto> {
        const response = await this.customerControllerUpdateV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
