/* tslint:disable */
/* eslint-disable */
/**
 * XCD APIs
 * API documentation for the backend services of XCD
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEventDto,
  CreateEventResponseDto,
  EventListResponseDto,
  EventOverviewResponseDto,
} from '../models/index';
import {
    CreateEventDtoFromJSON,
    CreateEventDtoToJSON,
    CreateEventResponseDtoFromJSON,
    CreateEventResponseDtoToJSON,
    EventListResponseDtoFromJSON,
    EventListResponseDtoToJSON,
    EventOverviewResponseDtoFromJSON,
    EventOverviewResponseDtoToJSON,
} from '../models/index';

export interface EventControllerCreateEventV1Request {
    createEventDto: CreateEventDto;
}

export interface EventControllerGetEventOverviewV1Request {
    eventId: string;
}

export interface EventControllerGetEventsByCustomerV1Request {
    status?: string;
    dateAdded?: string;
    lastModified?: string;
    upcoming?: string;
    search?: string;
}

/**
 * 
 */
export class EventApi extends runtime.BaseAPI {

    /**
     * Create an event
     */
    async eventControllerCreateEventV1Raw(requestParameters: EventControllerCreateEventV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEventResponseDto>> {
        if (requestParameters['createEventDto'] == null) {
            throw new runtime.RequiredError(
                'createEventDto',
                'Required parameter "createEventDto" was null or undefined when calling eventControllerCreateEventV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEventDtoToJSON(requestParameters['createEventDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEventResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create an event
     */
    async eventControllerCreateEventV1(requestParameters: EventControllerCreateEventV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEventResponseDto> {
        const response = await this.eventControllerCreateEventV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get event overview
     */
    async eventControllerGetEventOverviewV1Raw(requestParameters: EventControllerGetEventOverviewV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventOverviewResponseDto>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling eventControllerGetEventOverviewV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/events/{eventId}/overview`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventOverviewResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get event overview
     */
    async eventControllerGetEventOverviewV1(requestParameters: EventControllerGetEventOverviewV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventOverviewResponseDto> {
        const response = await this.eventControllerGetEventOverviewV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all events of a customer
     */
    async eventControllerGetEventsByCustomerV1Raw(requestParameters: EventControllerGetEventsByCustomerV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventListResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['dateAdded'] != null) {
            queryParameters['dateAdded'] = requestParameters['dateAdded'];
        }

        if (requestParameters['lastModified'] != null) {
            queryParameters['lastModified'] = requestParameters['lastModified'];
        }

        if (requestParameters['upcoming'] != null) {
            queryParameters['upcoming'] = requestParameters['upcoming'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get all events of a customer
     */
    async eventControllerGetEventsByCustomerV1(requestParameters: EventControllerGetEventsByCustomerV1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventListResponseDto> {
        const response = await this.eventControllerGetEventsByCustomerV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
