/* tslint:disable */
/* eslint-disable */
/**
 * XCD APIs
 * API documentation for the backend services of XCD
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AutoCompleteApiResponse,
  ReverseGeocodeApiResponse,
} from '../models/index';
import {
    AutoCompleteApiResponseFromJSON,
    AutoCompleteApiResponseToJSON,
    ReverseGeocodeApiResponseFromJSON,
    ReverseGeocodeApiResponseToJSON,
} from '../models/index';

export interface PlacesControllerGetPlaceByAddressV1Request {
    address: string;
}

export interface PlacesControllerPlacesAutoCompleteV1Request {
    search: string;
    types?: PlacesControllerPlacesAutoCompleteV1TypesEnum;
}

export interface PlacesControllerReverseGeocodeV1Request {
    latitude: number;
    longitude: number;
}

/**
 * 
 */
export class PlacesApi extends runtime.BaseAPI {

    /**
     * Get place by address
     */
    async placesControllerGetPlaceByAddressV1Raw(requestParameters: PlacesControllerGetPlaceByAddressV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReverseGeocodeApiResponse>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling placesControllerGetPlaceByAddressV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['address'] != null) {
            queryParameters['address'] = requestParameters['address'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/places/place-by-address`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReverseGeocodeApiResponseFromJSON(jsonValue));
    }

    /**
     * Get place by address
     */
    async placesControllerGetPlaceByAddressV1(requestParameters: PlacesControllerGetPlaceByAddressV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReverseGeocodeApiResponse> {
        const response = await this.placesControllerGetPlaceByAddressV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Places autocomplete with location details
     */
    async placesControllerPlacesAutoCompleteV1Raw(requestParameters: PlacesControllerPlacesAutoCompleteV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoCompleteApiResponse>> {
        if (requestParameters['search'] == null) {
            throw new runtime.RequiredError(
                'search',
                'Required parameter "search" was null or undefined when calling placesControllerPlacesAutoCompleteV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['types'] != null) {
            queryParameters['types'] = requestParameters['types'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/places`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AutoCompleteApiResponseFromJSON(jsonValue));
    }

    /**
     * Places autocomplete with location details
     */
    async placesControllerPlacesAutoCompleteV1(requestParameters: PlacesControllerPlacesAutoCompleteV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoCompleteApiResponse> {
        const response = await this.placesControllerPlacesAutoCompleteV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reverse geocode with location details
     */
    async placesControllerReverseGeocodeV1Raw(requestParameters: PlacesControllerReverseGeocodeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReverseGeocodeApiResponse>> {
        if (requestParameters['latitude'] == null) {
            throw new runtime.RequiredError(
                'latitude',
                'Required parameter "latitude" was null or undefined when calling placesControllerReverseGeocodeV1().'
            );
        }

        if (requestParameters['longitude'] == null) {
            throw new runtime.RequiredError(
                'longitude',
                'Required parameter "longitude" was null or undefined when calling placesControllerReverseGeocodeV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/places/reverse-geocode`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReverseGeocodeApiResponseFromJSON(jsonValue));
    }

    /**
     * Reverse geocode with location details
     */
    async placesControllerReverseGeocodeV1(requestParameters: PlacesControllerReverseGeocodeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReverseGeocodeApiResponse> {
        const response = await this.placesControllerReverseGeocodeV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PlacesControllerPlacesAutoCompleteV1TypesEnum = {
    Geocode: 'geocode',
    Address: 'address',
    Establishment: 'establishment',
    Regions: '(regions)',
    Cities: '(cities)'
} as const;
export type PlacesControllerPlacesAutoCompleteV1TypesEnum = typeof PlacesControllerPlacesAutoCompleteV1TypesEnum[keyof typeof PlacesControllerPlacesAutoCompleteV1TypesEnum];
