/* tslint:disable */
/* eslint-disable */
/**
 * XCD APIs
 * API documentation for the backend services of XCD
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CustomerResponseDto
 */
export interface CustomerResponseDto {
    /**
     * Customer ID
     * @type {string}
     * @memberof CustomerResponseDto
     */
    id: string;
    /**
     * XCD Customer user ID
     * @type {string}
     * @memberof CustomerResponseDto
     */
    userId: string;
    /**
     * Customer name
     * @type {string}
     * @memberof CustomerResponseDto
     */
    customerName: string;
    /**
     * Contact email address
     * @type {string}
     * @memberof CustomerResponseDto
     */
    contactEmail: string;
    /**
     * Contact phone number
     * @type {string}
     * @memberof CustomerResponseDto
     */
    contactPhone?: string;
    /**
     * Company ID
     * @type {string}
     * @memberof CustomerResponseDto
     */
    companyId: string;
    /**
     * Company name
     * @type {string}
     * @memberof CustomerResponseDto
     */
    companyName?: string;
    /**
     * Customer location
     * @type {object}
     * @memberof CustomerResponseDto
     */
    location?: object;
    /**
     * Customer status
     * @type {string}
     * @memberof CustomerResponseDto
     */
    status: CustomerResponseDtoStatusEnum;
    /**
     * Total events count
     * @type {number}
     * @memberof CustomerResponseDto
     */
    totalEvents: number;
    /**
     * Created by user ID
     * @type {string}
     * @memberof CustomerResponseDto
     */
    createdBy: string;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof CustomerResponseDto
     */
    createdAt: Date;
    /**
     * Last update timestamp
     * @type {Date}
     * @memberof CustomerResponseDto
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const CustomerResponseDtoStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Deleted: 'deleted'
} as const;
export type CustomerResponseDtoStatusEnum = typeof CustomerResponseDtoStatusEnum[keyof typeof CustomerResponseDtoStatusEnum];


/**
 * Check if a given object implements the CustomerResponseDto interface.
 */
export function instanceOfCustomerResponseDto(value: object): value is CustomerResponseDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('customerName' in value) || value['customerName'] === undefined) return false;
    if (!('contactEmail' in value) || value['contactEmail'] === undefined) return false;
    if (!('companyId' in value) || value['companyId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('totalEvents' in value) || value['totalEvents'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function CustomerResponseDtoFromJSON(json: any): CustomerResponseDto {
    return CustomerResponseDtoFromJSONTyped(json, false);
}

export function CustomerResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': json['userId'],
        'customerName': json['customerName'],
        'contactEmail': json['contactEmail'],
        'contactPhone': json['contactPhone'] == null ? undefined : json['contactPhone'],
        'companyId': json['companyId'],
        'companyName': json['companyName'] == null ? undefined : json['companyName'],
        'location': json['location'] == null ? undefined : json['location'],
        'status': json['status'],
        'totalEvents': json['totalEvents'],
        'createdBy': json['createdBy'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function CustomerResponseDtoToJSON(value?: CustomerResponseDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'userId': value['userId'],
        'customerName': value['customerName'],
        'contactEmail': value['contactEmail'],
        'contactPhone': value['contactPhone'],
        'companyId': value['companyId'],
        'companyName': value['companyName'],
        'location': value['location'],
        'status': value['status'],
        'totalEvents': value['totalEvents'],
        'createdBy': value['createdBy'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

