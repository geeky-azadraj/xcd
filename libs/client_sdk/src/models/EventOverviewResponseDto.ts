/* tslint:disable */
/* eslint-disable */
/**
 * XCD APIs
 * API documentation for the backend services of XCD
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EventVenueResponseDto } from './EventVenueResponseDto';
import {
    EventVenueResponseDtoFromJSON,
    EventVenueResponseDtoFromJSONTyped,
    EventVenueResponseDtoToJSON,
} from './EventVenueResponseDto';

/**
 * 
 * @export
 * @interface EventOverviewResponseDto
 */
export interface EventOverviewResponseDto {
    /**
     * Unique identifier of the event
     * @type {string}
     * @memberof EventOverviewResponseDto
     */
    eventId: string;
    /**
     * Title of the event
     * @type {string}
     * @memberof EventOverviewResponseDto
     */
    eventTitle: string;
    /**
     * Event logo URL
     * @type {string}
     * @memberof EventOverviewResponseDto
     */
    eventLogo: string;
    /**
     * Start date of the event
     * @type {Date}
     * @memberof EventOverviewResponseDto
     */
    eventStartDate: Date;
    /**
     * End date of the event
     * @type {Date}
     * @memberof EventOverviewResponseDto
     */
    eventEndDate: Date;
    /**
     * Event venue information
     * @type {EventVenueResponseDto}
     * @memberof EventOverviewResponseDto
     */
    eventVenue: EventVenueResponseDto;
    /**
     * Currency for the event
     * @type {string}
     * @memberof EventOverviewResponseDto
     */
    currency: string;
    /**
     * Start date for booking
     * @type {Date}
     * @memberof EventOverviewResponseDto
     */
    bookingStartDate: Date;
    /**
     * End date for booking
     * @type {Date}
     * @memberof EventOverviewResponseDto
     */
    bookingEndDate: Date;
    /**
     * Current status of the event
     * @type {string}
     * @memberof EventOverviewResponseDto
     */
    eventStatus: string;
    /**
     * Status of event category setup
     * @type {string}
     * @memberof EventOverviewResponseDto
     */
    eventCategoryStatus: string;
    /**
     * Status of event policies setup
     * @type {string}
     * @memberof EventOverviewResponseDto
     */
    eventPoliciesSetupStatus: string;
    /**
     * Total revenue generated
     * @type {number}
     * @memberof EventOverviewResponseDto
     */
    totalRevenue: number;
    /**
     * Revenue generated in current month
     * @type {number}
     * @memberof EventOverviewResponseDto
     */
    currentMonthRevenue: number;
    /**
     * Number of hotels added
     * @type {number}
     * @memberof EventOverviewResponseDto
     */
    hotelsAdded: number;
    /**
     * Total number of bookings
     * @type {number}
     * @memberof EventOverviewResponseDto
     */
    totalBookings: number;
}

/**
 * Check if a given object implements the EventOverviewResponseDto interface.
 */
export function instanceOfEventOverviewResponseDto(value: object): value is EventOverviewResponseDto {
    if (!('eventId' in value) || value['eventId'] === undefined) return false;
    if (!('eventTitle' in value) || value['eventTitle'] === undefined) return false;
    if (!('eventLogo' in value) || value['eventLogo'] === undefined) return false;
    if (!('eventStartDate' in value) || value['eventStartDate'] === undefined) return false;
    if (!('eventEndDate' in value) || value['eventEndDate'] === undefined) return false;
    if (!('eventVenue' in value) || value['eventVenue'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('bookingStartDate' in value) || value['bookingStartDate'] === undefined) return false;
    if (!('bookingEndDate' in value) || value['bookingEndDate'] === undefined) return false;
    if (!('eventStatus' in value) || value['eventStatus'] === undefined) return false;
    if (!('eventCategoryStatus' in value) || value['eventCategoryStatus'] === undefined) return false;
    if (!('eventPoliciesSetupStatus' in value) || value['eventPoliciesSetupStatus'] === undefined) return false;
    if (!('totalRevenue' in value) || value['totalRevenue'] === undefined) return false;
    if (!('currentMonthRevenue' in value) || value['currentMonthRevenue'] === undefined) return false;
    if (!('hotelsAdded' in value) || value['hotelsAdded'] === undefined) return false;
    if (!('totalBookings' in value) || value['totalBookings'] === undefined) return false;
    return true;
}

export function EventOverviewResponseDtoFromJSON(json: any): EventOverviewResponseDto {
    return EventOverviewResponseDtoFromJSONTyped(json, false);
}

export function EventOverviewResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventOverviewResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'eventId': json['eventId'],
        'eventTitle': json['eventTitle'],
        'eventLogo': json['eventLogo'],
        'eventStartDate': (new Date(json['eventStartDate'])),
        'eventEndDate': (new Date(json['eventEndDate'])),
        'eventVenue': EventVenueResponseDtoFromJSON(json['eventVenue']),
        'currency': json['currency'],
        'bookingStartDate': (new Date(json['bookingStartDate'])),
        'bookingEndDate': (new Date(json['bookingEndDate'])),
        'eventStatus': json['eventStatus'],
        'eventCategoryStatus': json['eventCategoryStatus'],
        'eventPoliciesSetupStatus': json['eventPoliciesSetupStatus'],
        'totalRevenue': json['totalRevenue'],
        'currentMonthRevenue': json['currentMonthRevenue'],
        'hotelsAdded': json['hotelsAdded'],
        'totalBookings': json['totalBookings'],
    };
}

export function EventOverviewResponseDtoToJSON(value?: EventOverviewResponseDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'eventId': value['eventId'],
        'eventTitle': value['eventTitle'],
        'eventLogo': value['eventLogo'],
        'eventStartDate': ((value['eventStartDate']).toISOString().substring(0,10)),
        'eventEndDate': ((value['eventEndDate']).toISOString().substring(0,10)),
        'eventVenue': EventVenueResponseDtoToJSON(value['eventVenue']),
        'currency': value['currency'],
        'bookingStartDate': ((value['bookingStartDate']).toISOString().substring(0,10)),
        'bookingEndDate': ((value['bookingEndDate']).toISOString().substring(0,10)),
        'eventStatus': value['eventStatus'],
        'eventCategoryStatus': value['eventCategoryStatus'],
        'eventPoliciesSetupStatus': value['eventPoliciesSetupStatus'],
        'totalRevenue': value['totalRevenue'],
        'currentMonthRevenue': value['currentMonthRevenue'],
        'hotelsAdded': value['hotelsAdded'],
        'totalBookings': value['totalBookings'],
    };
}

